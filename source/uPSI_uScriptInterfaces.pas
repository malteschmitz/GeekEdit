unit uPSI_uScriptInterfaces;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uScriptInterfaces = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TScriptTools(CL: TPSPascalCompiler);
procedure SIRegister_TAbstractScriptEditor(CL: TPSPascalCompiler);
procedure SIRegister_uScriptInterfaces(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TScriptTools(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAbstractScriptEditor(CL: TPSRuntimeClassImporter);
procedure RIRegister_uScriptInterfaces(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   uScriptInterfaces
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uScriptInterfaces]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TScriptTools(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TScriptTools') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TScriptTools') do
  begin
    RegisterMethod('Procedure ShowMessage( const Message : String)');
    RegisterMethod('Procedure ShowErrorMessage( const Message : String)');
    RegisterMethod('Function InputDlg( const Message : String; var Value : String) : Boolean');
    RegisterMethod('Function YesNoDlg( const Message : String) : Boolean');
    RegisterMethod('Function OpenFileDialog( const Caption : String) : String');
    RegisterMethod('Function OpenPictureDialog( const Caption : String) : String');
    RegisterMethod('Function RadioDialog( const Items : String) : Integer');
    RegisterMethod('Function StringReplace( const S, OldPattern, NewPattern : String; const IgnoreCase : Boolean) : String');
    RegisterMethod('Function Format( const Format : string; const Args : array of const) : string');
    RegisterMethod('Function FormatDateTime( const Format : string; DateTime : Double) : string');
    RegisterMethod('Function Now : Double');
    RegisterMethod('Function Trim( const s : String) : String');
    RegisterMethod('Function TrimLeft( const s : String) : String');
    RegisterMethod('Function TrimRight( const s : String) : String');
    RegisterMethod('Procedure GetImageDimensions( const FileName : String; var width, height : Integer)');
    RegisterMethod('Function CreateLink( const NewFileName : String; BaseFileName : String) : String');
    RegisterMethod('Function ExtractFilePath( const FileName : String) : String');
    RegisterMethod('Function ExtractFileName( const FileName : String) : String');
    RegisterMethod('Function ExtractFileExt( const FileName : String) : String');
    RegisterMethod('Function ExtractFileBase( const FileName : String) : String');
    RegisterMethod('Function ChangeFileExt( const FileName, NewExt : String) : String');
    RegisterMethod('Procedure RunApp( const Command : String)');
    RegisterMethod('Function FindApp( const AFileName, ACaption : String) : LongWord');
    RegisterMethod('Procedure BringAppToFront( const Handle : LongWord)');
    RegisterMethod('Procedure InvokeKeystroke( const Handle : LongWord; const Shortcut : String)');
    RegisterMethod('Procedure ShellExecute( const Verb, FileName : String)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAbstractScriptEditor(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TAbstractScriptEditor') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TAbstractScriptEditor') do
  begin
    RegisterMethod('Procedure RegisterMenu( const ParentMenuName, NewMenuName, NewMenuTitle : String)');
    RegisterMethod('Procedure RegisterScript( const ParentMenuName, ScriptTitle, ShortCut, ProcName : String)');
    RegisterMethod('Procedure RegisterActiveCharScript( const c : Char; const SyntaxName, ProcName : String)');
    RegisterMethod('Procedure SetSyntaxConditionalShortcut( const SyntaxName, MenuName : String)');
    RegisterMethod('Procedure SetGlobalGeekEditHotKey( const Shortcut : String)');
    RegisterMethod('Function Save : Boolean');
    RegisterMethod('Procedure RunConsoleApp( const Command : String)');
    RegisterMethod('Procedure RunConsoleBatchTool( const Command : String)');
    RegisterProperty('FileName', 'String', iptr);
    RegisterProperty('Col', 'Integer', iptr);
    RegisterProperty('Row', 'Integer', iptr);
    RegisterProperty('SelText', 'String', iptrw);
    RegisterProperty('SelStart', 'Integer', iptrw);
    RegisterProperty('SelLength', 'Integer', iptrw);
    RegisterProperty('Text', 'String', iptrw);
    RegisterProperty('CurLine', 'String', iptr);
    RegisterProperty('CurWord', 'String', iptr);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uScriptInterfaces(CL: TPSPascalCompiler);
begin
  SIRegister_TAbstractScriptEditor(CL);
  SIRegister_TScriptTools(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorCurWord_R(Self: TAbstractScriptEditor; var T: String);
begin T := Self.CurWord; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorCurLine_R(Self: TAbstractScriptEditor; var T: String);
begin T := Self.CurLine; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorText_W(Self: TAbstractScriptEditor; const T: String);
begin Self.Text := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorText_R(Self: TAbstractScriptEditor; var T: String);
begin T := Self.Text; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorSelLength_W(Self: TAbstractScriptEditor; const T: Integer);
begin Self.SelLength := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorSelLength_R(Self: TAbstractScriptEditor; var T: Integer);
begin T := Self.SelLength; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorSelStart_W(Self: TAbstractScriptEditor; const T: Integer);
begin Self.SelStart := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorSelStart_R(Self: TAbstractScriptEditor; var T: Integer);
begin T := Self.SelStart; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorSelText_W(Self: TAbstractScriptEditor; const T: String);
begin Self.SelText := T; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorSelText_R(Self: TAbstractScriptEditor; var T: String);
begin T := Self.SelText; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorRow_R(Self: TAbstractScriptEditor; var T: Integer);
begin T := Self.Row; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorCol_R(Self: TAbstractScriptEditor; var T: Integer);
begin T := Self.Col; end;

(*----------------------------------------------------------------------------*)
procedure TAbstractScriptEditorFileName_R(Self: TAbstractScriptEditor; var T: String);
begin T := Self.FileName; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TScriptTools(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TScriptTools) do
  begin
    RegisterMethod(@TScriptTools.ShowMessage, 'ShowMessage');
    RegisterMethod(@TScriptTools.ShowErrorMessage, 'ShowErrorMessage');
    RegisterMethod(@TScriptTools.InputDlg, 'InputDlg');
    RegisterMethod(@TScriptTools.YesNoDlg, 'YesNoDlg');
    RegisterMethod(@TScriptTools.OpenFileDialog, 'OpenFileDialog');
    RegisterMethod(@TScriptTools.OpenPictureDialog, 'OpenPictureDialog');
    RegisterMethod(@TScriptTools.RadioDialog, 'RadioDialog');
    RegisterMethod(@TScriptTools.StringReplace, 'StringReplace');
    RegisterMethod(@TScriptTools.Format, 'Format');
    RegisterMethod(@TScriptTools.FormatDateTime, 'FormatDateTime');
    RegisterMethod(@TScriptTools.Now, 'Now');
    RegisterMethod(@TScriptTools.Trim, 'Trim');
    RegisterMethod(@TScriptTools.TrimLeft, 'TrimLeft');
    RegisterMethod(@TScriptTools.TrimRight, 'TrimRight');
    RegisterMethod(@TScriptTools.GetImageDimensions, 'GetImageDimensions');
    RegisterMethod(@TScriptTools.CreateLink, 'CreateLink');
    RegisterMethod(@TScriptTools.ExtractFilePath, 'ExtractFilePath');
    RegisterMethod(@TScriptTools.ExtractFileName, 'ExtractFileName');
    RegisterMethod(@TScriptTools.ExtractFileExt, 'ExtractFileExt');
    RegisterMethod(@TScriptTools.ExtractFileBase, 'ExtractFileBase');
    RegisterMethod(@TScriptTools.ChangeFileExt, 'ChangeFileExt');
    RegisterMethod(@TScriptTools.RunApp, 'RunApp');
    RegisterMethod(@TScriptTools.FindApp, 'FindApp');
    RegisterMethod(@TScriptTools.BringAppToFront, 'BringAppToFront');
    RegisterMethod(@TScriptTools.InvokeKeystroke, 'InvokeKeystroke');
    RegisterMethod(@TScriptTools.ShellExecute, 'ShellExecute');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAbstractScriptEditor(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAbstractScriptEditor) do
  begin
    RegisterMethod(@TAbstractScriptEditor.RegisterMenu, 'RegisterMenu');
    RegisterMethod(@TAbstractScriptEditor.RegisterScript, 'RegisterScript');
    RegisterMethod(@TAbstractScriptEditor.RegisterActiveCharScript, 'RegisterActiveCharScript');
    RegisterMethod(@TAbstractScriptEditor.SetSyntaxConditionalShortcut, 'SetSyntaxConditionalShortcut');
    RegisterMethod(@TAbstractScriptEditor.SetGlobalGeekEditHotKey, 'SetGlobalGeekEditHotKey');
    RegisterMethod(@TAbstractScriptEditor.Save, 'Save');
    RegisterMethod(@TAbstractScriptEditor.RunConsoleApp, 'RunConsoleApp');
    RegisterMethod(@TAbstractScriptEditor.RunConsoleBatchTool, 'RunConsoleBatchTool');
    RegisterPropertyHelper(@TAbstractScriptEditorFileName_R,nil,'FileName');
    RegisterPropertyHelper(@TAbstractScriptEditorCol_R,nil,'Col');
    RegisterPropertyHelper(@TAbstractScriptEditorRow_R,nil,'Row');
    RegisterPropertyHelper(@TAbstractScriptEditorSelText_R,@TAbstractScriptEditorSelText_W,'SelText');
    RegisterPropertyHelper(@TAbstractScriptEditorSelStart_R,@TAbstractScriptEditorSelStart_W,'SelStart');
    RegisterPropertyHelper(@TAbstractScriptEditorSelLength_R,@TAbstractScriptEditorSelLength_W,'SelLength');
    RegisterPropertyHelper(@TAbstractScriptEditorText_R,@TAbstractScriptEditorText_W,'Text');
    RegisterPropertyHelper(@TAbstractScriptEditorCurLine_R,nil,'CurLine');
    RegisterPropertyHelper(@TAbstractScriptEditorCurWord_R,nil,'CurWord');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uScriptInterfaces(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TAbstractScriptEditor(CL);
  RIRegister_TScriptTools(CL);
end;

 
 
{ TPSImport_uScriptInterfaces }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uScriptInterfaces.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uScriptInterfaces(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uScriptInterfaces.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uScriptInterfaces(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
